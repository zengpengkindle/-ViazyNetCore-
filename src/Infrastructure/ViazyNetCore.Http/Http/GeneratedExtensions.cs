// This file was auto-generated by Caesar.CodeGen. Do not edit directly.

using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;



namespace ViazyNetCore.Http
{
    /// <summary>
    /// Fluent extension methods on String, Url, Uri, and ICaesarRequest.
    /// </summary>
    public static partial class GeneratedExtensions
    {
        /// <summary>
        /// Sends an asynchronous request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="verb">The HTTP verb used to make the request.</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> SendJsonAsync(this IEasyRequest request, HttpMethod verb, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            request.Content = new CapturedJsonContent(request.Settings.JsonSerializer.Serialize(data));
            return request.SendAsync(verb, cancellationToken: cancellationToken, completionOption: completionOption);
        }


        /// <summary>
        /// Sends an asynchronous request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="verb">The HTTP verb used to make the request.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> SendStringAsync(this IEasyRequest request, HttpMethod verb, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            request.Content = new CapturedStringContent(data);
            return request.SendAsync(verb, cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Sends an asynchronous request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="verb">The HTTP verb used to make the request.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> SendUrlEncodedAsync(this IEasyRequest request, HttpMethod verb, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            request.Content = new CapturedUrlEncodedContent(request.Settings.UrlEncodedSerializer.Serialize(data));
            return request.SendAsync(verb, cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Sends an asynchronous GET request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> GetAsync(this IEasyRequest request, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return request.SendAsync(HttpMethod.Get, cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Sends an asynchronous GET request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the JSON response body deserialized to an object of type T.</returns>
        public static Task<T> GetJsonAsync<T>(this IEasyRequest request, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return request.SendAsync(HttpMethod.Get, cancellationToken: cancellationToken, completionOption: completionOption).ReceiveJson<T>();
        }

        /// <summary>
        /// Sends an asynchronous GET request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the JSON response body deserialized to a dynamic.</returns>
        public static Task<dynamic> GetJsonAsync(this IEasyRequest request, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return request.SendAsync(HttpMethod.Get, cancellationToken: cancellationToken, completionOption: completionOption).ReceiveJson();
        }

        /// <summary>
        /// Sends an asynchronous GET request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the JSON response body deserialized to a list of dynamics.</returns>
        public static Task<IList<dynamic>> GetJsonListAsync(this IEasyRequest request, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return request.SendAsync(HttpMethod.Get, cancellationToken: cancellationToken, completionOption: completionOption).ReceiveJsonList();
        }

        /// <summary>
        /// Sends an asynchronous GET request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the response body as a string.</returns>
        public static Task<string> GetStringAsync(this IEasyRequest request, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return request.SendAsync(HttpMethod.Get, cancellationToken: cancellationToken, completionOption: completionOption).ReceiveString();
        }

        /// <summary>
        /// Sends an asynchronous GET request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the response body as a Stream.</returns>
        public static Task<Stream> GetStreamAsync(this IEasyRequest request, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return request.SendAsync(HttpMethod.Get, cancellationToken: cancellationToken, completionOption: completionOption).ReceiveStream();
        }

        /// <summary>
        /// Sends an asynchronous GET request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the response body as a byte array.</returns>
        public static Task<byte[]> GetBytesAsync(this IEasyRequest request, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return request.SendAsync(HttpMethod.Get, cancellationToken: cancellationToken, completionOption: completionOption).ReceiveBytes();
        }

        /// <summary>
        /// Sends an asynchronous POST request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="content">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostAsync(this IEasyRequest request, HttpContent content = null, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            if (content != null)
                request.Content = content;
            return request.SendAsync(HttpMethod.Post, cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Sends an asynchronous POST request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostJsonAsync(this IEasyRequest request, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            request.Content = new CapturedJsonContent(request.Settings.JsonSerializer.Serialize(data));
            return request.SendAsync(HttpMethod.Post, cancellationToken: cancellationToken, completionOption: completionOption);
        }


        /// <summary>
        /// Sends an asynchronous POST request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostJsonAsync(this IEasyRequest request, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            request.Content = new CapturedJsonContent(data);
            return request.SendAsync(HttpMethod.Post, cancellationToken: cancellationToken, completionOption: completionOption);
        }

        public static Task<IEasyResponse> PostOctetAsync(this IEasyRequest request, byte[] data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            request.Content = new CapturedOctetContent(data);
            return request.SendAsync(HttpMethod.Post, cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Sends an asynchronous POST request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostStringAsync(this IEasyRequest request, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            request.Content = new CapturedStringContent(data);
            return request.SendAsync(HttpMethod.Post, cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Sends an asynchronous POST request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostUrlEncodedAsync(this IEasyRequest request, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            request.Content = new CapturedUrlEncodedContent(request.Settings.UrlEncodedSerializer.Serialize(data));
            return request.SendAsync(HttpMethod.Post, cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Sends an asynchronous HEAD request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> HeadAsync(this IEasyRequest request, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return request.SendAsync(HttpMethod.Head, cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Sends an asynchronous PUT request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="content">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PutAsync(this IEasyRequest request, HttpContent content = null, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            request.Content = content;
            return request.SendAsync(HttpMethod.Put, cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Sends an asynchronous PUT request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PutJsonAsync(this IEasyRequest request, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            request.Content = new CapturedJsonContent(request.Settings.JsonSerializer.Serialize(data));
            return request.SendAsync(HttpMethod.Put, cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Sends an asynchronous PUT request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PutStringAsync(this IEasyRequest request, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            request.Content = new CapturedStringContent(data);
            return request.SendAsync(HttpMethod.Put, cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Sends an asynchronous DELETE request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> DeleteAsync(this IEasyRequest request, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return request.SendAsync(HttpMethod.Delete, cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Sends an asynchronous PATCH request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="content">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PatchAsync(this IEasyRequest request, HttpContent content = null, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            request.Content = content;
            return request.SendAsync(new HttpMethod("PATCH"), cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Sends an asynchronous PATCH request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PatchJsonAsync(this IEasyRequest request, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            request.Content = new CapturedJsonContent(request.Settings.JsonSerializer.Serialize(data));
            return request.SendAsync(new HttpMethod("PATCH"), cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Sends an asynchronous PATCH request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PatchStringAsync(this IEasyRequest request, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            request.Content = new CapturedStringContent(data);
            return request.SendAsync(new HttpMethod("PATCH"), cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Sends an asynchronous OPTIONS request.
        /// </summary>
        /// <param name="request">This ICaesarRequest</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> OptionsAsync(this IEasyRequest request, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return request.SendAsync(HttpMethod.Options, cancellationToken: cancellationToken, completionOption: completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="verb">The HTTP verb used to make the request.</param>
        /// <param name="content">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> SendAsync(this Url url, HttpMethod verb, HttpContent content = null, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            var request = new EasyRequest(url) { Content = content };
            return request.SendAsync(verb, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="verb">The HTTP verb used to make the request.</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> SendJsonAsync(this Url url, HttpMethod verb, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).SendJsonAsync(verb, data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="verb">The HTTP verb used to make the request.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> SendStringAsync(this Url url, HttpMethod verb, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).SendStringAsync(verb, data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="verb">The HTTP verb used to make the request.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> SendUrlEncodedAsync(this Url url, HttpMethod verb, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).SendUrlEncodedAsync(verb, data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> GetAsync(this Url url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).GetAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the JSON response body deserialized to an object of type T.</returns>
        public static Task<T> GetJsonAsync<T>(this Url url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).GetJsonAsync<T>(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the JSON response body deserialized to a dynamic.</returns>
        public static Task<dynamic> GetJsonAsync(this Url url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).GetJsonAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the JSON response body deserialized to a list of dynamics.</returns>
        public static Task<IList<dynamic>> GetJsonListAsync(this Url url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).GetJsonListAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the response body as a string.</returns>
        public static Task<string> GetStringAsync(this Url url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).GetStringAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the response body as a Stream.</returns>
        public static Task<Stream> GetStreamAsync(this Url url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).GetStreamAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the response body as a byte array.</returns>
        public static Task<byte[]> GetBytesAsync(this Url url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).GetBytesAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous POST request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="content">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostAsync(this Url url, HttpContent content = null, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PostAsync(content, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous POST request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostJsonAsync(this Url url, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PostJsonAsync(data, cancellationToken, completionOption);
        }

        public static Task<IEasyResponse> PostOctetAsync(this Url url, byte[] data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PostOctetAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous POST request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostStringAsync(this Url url, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PostStringAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous POST request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostUrlEncodedAsync(this Url url, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PostUrlEncodedAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous HEAD request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> HeadAsync(this Url url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).HeadAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PUT request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="content">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PutAsync(this Url url, HttpContent content = null, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PutAsync(content, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PUT request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PutJsonAsync(this Url url, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PutJsonAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PUT request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PutStringAsync(this Url url, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PutStringAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous DELETE request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> DeleteAsync(this Url url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).DeleteAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PATCH request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="content">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PatchAsync(this Url url, HttpContent content = null, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PatchAsync(content, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PATCH request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PatchJsonAsync(this Url url, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PatchJsonAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PATCH request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PatchStringAsync(this Url url, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PatchStringAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous OPTIONS request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> OptionsAsync(this Url url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).OptionsAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets a request header.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="name">The header name.</param>
        /// <param name="value">The header value.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithHeader(this Url url, string name, object value)
        {
            return new EasyRequest(url).WithHeader(name, value);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets request headers based on property names/values of the provided object, or keys/values if object is a dictionary, to be sent.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="headers">Names/values of HTTP headers to set. Typically an anonymous object or IDictionary.</param>
        /// <param name="replaceUnderscoreWithHyphen">If true, underscores in property names will be replaced by hyphens. Default is true.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithHeaders(this Url url, object headers, bool replaceUnderscoreWithHyphen = true)
        {
            return new EasyRequest(url).WithHeaders(headers, replaceUnderscoreWithHyphen);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets the Authorization header according to Basic Authentication protocol.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="username">Username of authenticating user.</param>
        /// <param name="password">Password of authenticating user.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithBasicAuth(this Url url, string username, string password)
        {
            return new EasyRequest(url).WithBasicAuth(username, password);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets the Authorization header with a bearer token according to OAuth 2.0 specification.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="token">The acquired oAuth bearer token.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithOAuthBearerToken(this Url url, string token)
        {
            return new EasyRequest(url).WithOAuthBearerToken(token);
        }

        /// <summary>
        /// Creates a new CaesarRequest and adds a name-value pair to its Cookie header. To automatically maintain a cookie "session", consider using a CookieJar or CookieSession instead.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="name">The cookie name.</param>
        /// <param name="value">The cookie value.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithCookie(this Url url, string name, object value)
        {
            return new EasyRequest(url).WithCookie(name, value);
        }

        /// <summary>
        /// Creates a new CaesarRequest and adds name-value pairs to its Cookie header based on property names/values of the provided object, or keys/values if object is a dictionary. To automatically maintain a cookie "session", consider using a CookieJar or CookieSession instead.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="values">Names/values of HTTP cookies to set. Typically an anonymous object or IDictionary.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithCookies(this Url url, object values)
        {
            return new EasyRequest(url).WithCookies(values);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets the CookieJar associated with this request, which will be updated with any Set-Cookie headers present in the response and is suitable for reuse in subsequent requests.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="cookieJar">The CookieJar.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithCookies(this Url url, CookieJar cookieJar)
        {
            return new EasyRequest(url).WithCookies(cookieJar);
        }

        /// <summary>
        /// Creates a new CaesarRequest and associates it with a new CookieJar, which will be updated with any Set-Cookie headers present in the response and is suitable for reuse in subsequent requests.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="cookieJar">The created CookieJar, which can be reused in subsequent requests.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithCookies(this Url url, out CookieJar cookieJar)
        {
            return new EasyRequest(url).WithCookies(out cookieJar);
        }



        /// <summary>
        /// Creates a new CaesarRequest and allows changing its Settings inline.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="action">A delegate defining the Settings changes.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest ConfigureRequest(this Url url, Action<EasyHttpSettings> action)
        {
            return new EasyRequest(url).ConfigureRequest(action);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets the request timeout.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="timespan">Time to wait before the request times out.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithTimeout(this Url url, TimeSpan timespan)
        {
            return new EasyRequest(url).WithTimeout(timespan);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets the request timeout.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="seconds">Seconds to wait before the request times out.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithTimeout(this Url url, int seconds)
        {
            return new EasyRequest(url).WithTimeout(seconds);
        }

        /// <summary>
        /// Creates a new CaesarRequest and adds a pattern representing an HTTP status code or range of codes which (in addition to 2xx) will NOT result in a CaesarHttpException being thrown.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="pattern">Examples: "3xx", "100,300,600", "100-299,6xx"</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest AllowHttpStatus(this Url url, string pattern)
        {
            return new EasyRequest(url).AllowHttpStatus(pattern);
        }

        /// <summary>
        /// Creates a new CaesarRequest and adds an HttpStatusCode which (in addition to 2xx) will NOT result in a CaesarHttpException being thrown.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="statusCodes">The HttpStatusCode(s) to allow.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest AllowHttpStatus(this Url url, params HttpStatusCode[] statusCodes)
        {
            return new EasyRequest(url).AllowHttpStatus(statusCodes);
        }

        /// <summary>
        /// Creates a new CaesarRequest and configures it to allow any returned HTTP status without throwing a CaesarHttpException.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest AllowAnyHttpStatus(this Url url)
        {
            return new EasyRequest(url).AllowAnyHttpStatus();
        }

        /// <summary>
        /// Creates a new CaesarRequest and configures whether redirects are automatically followed.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="enabled">true if Caesar should automatically send a new request to the redirect URL, false if it should not.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithAutoRedirect(this Url url, bool enabled)
        {
            return new EasyRequest(url).WithAutoRedirect(enabled);
        }



        /// <summary>
        /// Creates a new CaesarRequest and asynchronously downloads a file.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="localFolderPath">Path of local folder where file is to be downloaded.</param>
        /// <param name="localFileName">Name of local file. If not specified, the source filename (last segment of the URL) is used.</param>
        /// <param name="bufferSize">Buffer size in bytes. Default is 4096.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <returns>A Task whose result is the local path of the downloaded file.</returns>
        public static Task<string> DownloadFileAsync(this Url url, string localFolderPath, string localFileName = null, int bufferSize = 4096, CancellationToken cancellationToken = default(CancellationToken))
        {
            return new EasyRequest(url).DownloadFileAsync(localFolderPath, localFileName, bufferSize, cancellationToken);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous multipart/form-data POST request.
        /// </summary>
        /// <param name="url">This Caesar.Url.</param>
        /// <param name="buildContent">A delegate for building the content parts.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostMultipartAsync(this Url url, Action<CapturedMultipartContent> buildContent, CancellationToken cancellationToken = default(CancellationToken))
        {
            return new EasyRequest(url).PostMultipartAsync(buildContent, cancellationToken);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="verb">The HTTP verb used to make the request.</param>
        /// <param name="content">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> SendAsync(this string url, HttpMethod verb, HttpContent content = null, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            var request = new EasyRequest(url)
            {
                Content = content
            };
            return request.SendAsync(verb, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="verb">The HTTP verb used to make the request.</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> SendJsonAsync(this string url, HttpMethod verb, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).SendJsonAsync(verb, data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="verb">The HTTP verb used to make the request.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> SendStringAsync(this string url, HttpMethod verb, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).SendStringAsync(verb, data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="verb">The HTTP verb used to make the request.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> SendUrlEncodedAsync(this string url, HttpMethod verb, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).SendUrlEncodedAsync(verb, data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> GetAsync(this string url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).GetAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the JSON response body deserialized to an object of type T.</returns>
        public static Task<T> GetJsonAsync<T>(this string url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).GetJsonAsync<T>(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the JSON response body deserialized to a dynamic.</returns>
        public static Task<dynamic> GetJsonAsync(this string url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).GetJsonAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the JSON response body deserialized to a list of dynamics.</returns>
        public static Task<IList<dynamic>> GetJsonListAsync(this string url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).GetJsonListAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the response body as a string.</returns>
        public static Task<string> GetStringAsync(this string url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).GetStringAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the response body as a Stream.</returns>
        public static Task<Stream> GetStreamAsync(this string url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).GetStreamAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the response body as a byte array.</returns>
        public static Task<byte[]> GetBytesAsync(this string url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).GetBytesAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous POST request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="content">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostAsync(this string url, HttpContent content = null, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PostAsync(content, cancellationToken, completionOption);
        }



        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous POST request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostJsonAsync(this string url, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PostJsonAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous POST request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostJsonAsync(this string url, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PostJsonAsync(data, cancellationToken, completionOption);
        }

        public static Task<IEasyResponse> PostOctetAsync(this string url, byte[] data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PostOctetAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous POST request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostStringAsync(this string url, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PostStringAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous POST request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostUrlEncodedAsync(this string url, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PostUrlEncodedAsync(data, cancellationToken, completionOption);
        }


        public static IEasyRequest WithPostUrlEncoded(this string url, object data)
        {
            var request = new EasyRequest(url);
            request.Content = new CapturedUrlEncodedContent(request.Settings.UrlEncodedSerializer.Serialize(data));
            return request;
        }

        public static IEasyRequest WithPostJson(this string url, object data)
        {
            var request = new EasyRequest(url);
            request.Content = new CapturedJsonContent(request.Settings.JsonSerializer.Serialize(data));
            return request;
        }

        public static IEasyRequest WithPostJson(this Url url, object data)
        {
            var request = new EasyRequest(url);
            request.Content = new CapturedJsonContent(request.Settings.JsonSerializer.Serialize(data));
            return request;
        }

        public static IEasyRequest WithPostJson(this string url, string data)
        {
            var request = new EasyRequest(url);
            request.Content = new CapturedJsonContent(data);
            return request;
        }

        public static IEasyRequest WithPostString(this string url, string data)
        {
            var request = new EasyRequest(url);
            request.Content = new CapturedStringContent(data);
            return request;
        }

        public static IEasyRequest WithPostData(this string url, HttpContent content)
        {
            var request = new EasyRequest(url);
            request.Content = content;
            return request;
        }

        public static IEasyRequest WithPostOctet(this string url, byte[] data)
        {
            var request = new EasyRequest(url);
            request.Content = new CapturedOctetContent(data); ;
            return request;
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous HEAD request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> HeadAsync(this string url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).HeadAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PUT request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="content">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PutAsync(this string url, HttpContent content = null, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PutAsync(content, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PUT request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PutJsonAsync(this string url, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PutJsonAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PUT request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PutStringAsync(this string url, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PutStringAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous DELETE request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> DeleteAsync(this string url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).DeleteAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PATCH request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="content">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PatchAsync(this string url, HttpContent content = null, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PatchAsync(content, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PATCH request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PatchJsonAsync(this string url, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PatchJsonAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PATCH request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PatchStringAsync(this string url, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).PatchStringAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous OPTIONS request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> OptionsAsync(this string url, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(url).OptionsAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets a request header.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="name">The header name.</param>
        /// <param name="value">The header value.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithHeader(this string url, string name, object value)
        {
            return new EasyRequest(url).WithHeader(name, value);
        }

        public static IEasyRequest WithUserAgent(this string url, object value)
        {
            return new EasyRequest(url).WithUserAgent(value);
        }

        public static IEasyRequest WithReferer(this string url, string value)
        {
            return new EasyRequest(url).WithReferer(value);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets request headers based on property names/values of the provided object, or keys/values if object is a dictionary, to be sent.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="headers">Names/values of HTTP headers to set. Typically an anonymous object or IDictionary.</param>
        /// <param name="replaceUnderscoreWithHyphen">If true, underscores in property names will be replaced by hyphens. Default is true.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithHeaders(this string url, object headers, bool replaceUnderscoreWithHyphen = true)
        {
            return new EasyRequest(url).WithHeaders(headers, replaceUnderscoreWithHyphen);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets the Authorization header according to Basic Authentication protocol.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="username">Username of authenticating user.</param>
        /// <param name="password">Password of authenticating user.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithBasicAuth(this string url, string username, string password)
        {
            return new EasyRequest(url).WithBasicAuth(username, password);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets the Authorization header with a bearer token according to OAuth 2.0 specification.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="token">The acquired oAuth bearer token.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithOAuthBearerToken(this string url, string token)
        {
            return new EasyRequest(url).WithOAuthBearerToken(token);
        }

        /// <summary>
        /// Creates a new CaesarRequest and adds a name-value pair to its Cookie header. To automatically maintain a cookie "session", consider using a CookieJar or CookieSession instead.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="name">The cookie name.</param>
        /// <param name="value">The cookie value.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithCookie(this string url, string name, object value)
        {
            return new EasyRequest(url).WithCookie(name, value);
        }

        /// <summary>
        /// Creates a new CaesarRequest and adds name-value pairs to its Cookie header based on property names/values of the provided object, or keys/values if object is a dictionary. To automatically maintain a cookie "session", consider using a CookieJar or CookieSession instead.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="values">Names/values of HTTP cookies to set. Typically an anonymous object or IDictionary.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithCookies(this string url, object values)
        {
            return new EasyRequest(url).WithCookies(values);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets the CookieJar associated with this request, which will be updated with any Set-Cookie headers present in the response and is suitable for reuse in subsequent requests.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="cookieJar">The CookieJar.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithCookies(this string url, CookieJar cookieJar)
        {
            return new EasyRequest(url).WithCookies(cookieJar);
        }

        /// <summary>
        /// Creates a new CaesarRequest and associates it with a new CookieJar, which will be updated with any Set-Cookie headers present in the response and is suitable for reuse in subsequent requests.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="cookieJar">The created CookieJar, which can be reused in subsequent requests.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithCookies(this string url, out CookieJar cookieJar)
        {
            return new EasyRequest(url).WithCookies(out cookieJar);
        }



        /// <summary>
        /// Creates a new CaesarRequest and allows changing its Settings inline.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="action">A delegate defining the Settings changes.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest ConfigureRequest(this string url, Action<EasyHttpSettings> action)
        {
            return new EasyRequest(url).ConfigureRequest(action);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets the request timeout.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="timespan">Time to wait before the request times out.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithTimeout(this string url, TimeSpan timespan)
        {
            return new EasyRequest(url).WithTimeout(timespan);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets the request timeout.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="seconds">Seconds to wait before the request times out.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithTimeout(this string url, int seconds)
        {
            return new EasyRequest(url).WithTimeout(seconds);
        }

        /// <summary>
        /// Creates a new CaesarRequest and adds a pattern representing an HTTP status code or range of codes which (in addition to 2xx) will NOT result in a CaesarHttpException being thrown.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="pattern">Examples: "3xx", "100,300,600", "100-299,6xx"</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest AllowHttpStatus(this string url, string pattern)
        {
            return new EasyRequest(url).AllowHttpStatus(pattern);
        }

        /// <summary>
        /// Creates a new CaesarRequest and adds an HttpStatusCode which (in addition to 2xx) will NOT result in a CaesarHttpException being thrown.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="statusCodes">The HttpStatusCode(s) to allow.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest AllowHttpStatus(this string url, params HttpStatusCode[] statusCodes)
        {
            return new EasyRequest(url).AllowHttpStatus(statusCodes);
        }

        /// <summary>
        /// Creates a new CaesarRequest and configures it to allow any returned HTTP status without throwing a CaesarHttpException.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest AllowAnyHttpStatus(this string url)
        {
            return new EasyRequest(url).AllowAnyHttpStatus();
        }

        /// <summary>
        /// Creates a new CaesarRequest and configures whether redirects are automatically followed.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="enabled">true if Caesar should automatically send a new request to the redirect URL, false if it should not.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithAutoRedirect(this string url, bool enabled)
        {
            return new EasyRequest(url).WithAutoRedirect(enabled);
        }



        public static IEasyRequest WithProxy(this string url, WebProxy proxy)
        {
            return new EasyRequest(url).WithProxy(proxy);
        }
        public static IEasyRequest WithProxy(this string url, string proxyIp)
        {
            return new EasyRequest(url).WithProxy(proxyIp);
        }
        public static IEasyRequest WithProxy(this string url, Func<string> func)
        {
            return new EasyRequest(url).WithProxy(func?.Invoke());
        }
        public static IEasyRequest WithProxy(this string url, Func<ProxyInfo> func)
        {
            return new EasyRequest(url).WithProxy(func?.Invoke()?.ProxyIp);
        }
        public static IEasyRequest WithProxy(this Url url, Func<ProxyInfo> func)
        {
            return new EasyRequest(url).WithProxy(func?.Invoke()?.ProxyIp);
        }
        /// <summary>
        /// Creates a new CaesarRequest and asynchronously downloads a file.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="localFolderPath">Path of local folder where file is to be downloaded.</param>
        /// <param name="localFileName">Name of local file. If not specified, the source filename (last segment of the URL) is used.</param>
        /// <param name="bufferSize">Buffer size in bytes. Default is 4096.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <returns>A Task whose result is the local path of the downloaded file.</returns>
        public static Task<string> DownloadFileAsync(this string url, string localFolderPath, string localFileName = null, int bufferSize = 4096, CancellationToken cancellationToken = default(CancellationToken))
        {
            return new EasyRequest(url).DownloadFileAsync(localFolderPath, localFileName, bufferSize, cancellationToken);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous multipart/form-data POST request.
        /// </summary>
        /// <param name="url">This URL.</param>
        /// <param name="buildContent">A delegate for building the content parts.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostMultipartAsync(this string url, Action<CapturedMultipartContent> buildContent, CancellationToken cancellationToken = default(CancellationToken))
        {
            return new EasyRequest(url).PostMultipartAsync(buildContent, cancellationToken);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="verb">The HTTP verb used to make the request.</param>
        /// <param name="content">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> SendAsync(this Uri uri, HttpMethod verb, HttpContent content = null, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            var request = new EasyRequest(uri)
            {
                Content = content
            };
            return request.SendAsync(verb, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="verb">The HTTP verb used to make the request.</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> SendJsonAsync(this Uri uri, HttpMethod verb, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).SendJsonAsync(verb, data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="verb">The HTTP verb used to make the request.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> SendStringAsync(this Uri uri, HttpMethod verb, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).SendStringAsync(verb, data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="verb">The HTTP verb used to make the request.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> SendUrlEncodedAsync(this Uri uri, HttpMethod verb, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).SendUrlEncodedAsync(verb, data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> GetAsync(this Uri uri, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).GetAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the JSON response body deserialized to an object of type T.</returns>
        public static Task<T> GetJsonAsync<T>(this Uri uri, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).GetJsonAsync<T>(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the JSON response body deserialized to a dynamic.</returns>
        public static Task<dynamic> GetJsonAsync(this Uri uri, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).GetJsonAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the JSON response body deserialized to a list of dynamics.</returns>
        public static Task<IList<dynamic>> GetJsonListAsync(this Uri uri, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).GetJsonListAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the response body as a string.</returns>
        public static Task<string> GetStringAsync(this Uri uri, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).GetStringAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the response body as a Stream.</returns>
        public static Task<Stream> GetStreamAsync(this Uri uri, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).GetStreamAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous GET request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the response body as a byte array.</returns>
        public static Task<byte[]> GetBytesAsync(this Uri uri, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).GetBytesAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous POST request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="content">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostAsync(this Uri uri, HttpContent content = null, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).PostAsync(content, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous POST request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostJsonAsync(this Uri uri, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).PostJsonAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous POST request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostStringAsync(this Uri uri, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).PostStringAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous POST request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostUrlEncodedAsync(this Uri uri, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).PostUrlEncodedAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous HEAD request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> HeadAsync(this Uri uri, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).HeadAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PUT request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="content">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PutAsync(this Uri uri, HttpContent content = null, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).PutAsync(content, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PUT request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PutJsonAsync(this Uri uri, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).PutJsonAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PUT request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PutStringAsync(this Uri uri, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).PutStringAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous DELETE request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> DeleteAsync(this Uri uri, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).DeleteAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PATCH request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="content">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PatchAsync(this Uri uri, HttpContent content = null, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).PatchAsync(content, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PATCH request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="data">An object representing the request body, which will be serialized to JSON.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PatchJsonAsync(this Uri uri, object data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).PatchJsonAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous PATCH request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="data">Contents of the request body.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PatchStringAsync(this Uri uri, string data, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).PatchStringAsync(data, cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous OPTIONS request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> OptionsAsync(this Uri uri, CancellationToken cancellationToken = default(CancellationToken), HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead)
        {
            return new EasyRequest(uri).OptionsAsync(cancellationToken, completionOption);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets a request header.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="name">The header name.</param>
        /// <param name="value">The header value.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithHeader(this Uri uri, string name, object value)
        {
            return new EasyRequest(uri).WithHeader(name, value);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets request headers based on property names/values of the provided object, or keys/values if object is a dictionary, to be sent.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="headers">Names/values of HTTP headers to set. Typically an anonymous object or IDictionary.</param>
        /// <param name="replaceUnderscoreWithHyphen">If true, underscores in property names will be replaced by hyphens. Default is true.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithHeaders(this Uri uri, object headers, bool replaceUnderscoreWithHyphen = true)
        {
            return new EasyRequest(uri).WithHeaders(headers, replaceUnderscoreWithHyphen);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets the Authorization header according to Basic Authentication protocol.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="username">Username of authenticating user.</param>
        /// <param name="password">Password of authenticating user.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithBasicAuth(this Uri uri, string username, string password)
        {
            return new EasyRequest(uri).WithBasicAuth(username, password);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets the Authorization header with a bearer token according to OAuth 2.0 specification.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="token">The acquired oAuth bearer token.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithOAuthBearerToken(this Uri uri, string token)
        {
            return new EasyRequest(uri).WithOAuthBearerToken(token);
        }

        /// <summary>
        /// Creates a new CaesarRequest and adds a name-value pair to its Cookie header. To automatically maintain a cookie "session", consider using a CookieJar or CookieSession instead.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="name">The cookie name.</param>
        /// <param name="value">The cookie value.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithCookie(this Uri uri, string name, object value)
        {
            return new EasyRequest(uri).WithCookie(name, value);
        }

        /// <summary>
        /// Creates a new CaesarRequest and adds name-value pairs to its Cookie header based on property names/values of the provided object, or keys/values if object is a dictionary. To automatically maintain a cookie "session", consider using a CookieJar or CookieSession instead.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="values">Names/values of HTTP cookies to set. Typically an anonymous object or IDictionary.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithCookies(this Uri uri, object values)
        {
            return new EasyRequest(uri).WithCookies(values);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets the CookieJar associated with this request, which will be updated with any Set-Cookie headers present in the response and is suitable for reuse in subsequent requests.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="cookieJar">The CookieJar.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithCookies(this Uri uri, CookieJar cookieJar)
        {
            return new EasyRequest(uri).WithCookies(cookieJar);
        }

        /// <summary>
        /// Creates a new CaesarRequest and associates it with a new CookieJar, which will be updated with any Set-Cookie headers present in the response and is suitable for reuse in subsequent requests.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="cookieJar">The created CookieJar, which can be reused in subsequent requests.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithCookies(this Uri uri, out CookieJar cookieJar)
        {
            return new EasyRequest(uri).WithCookies(out cookieJar);
        }

        /// <summary>
        /// Creates a new CaesarRequest and allows changing its Settings inline.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="action">A delegate defining the Settings changes.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest ConfigureRequest(this Uri uri, Action<EasyHttpSettings> action)
        {
            return new EasyRequest(uri).ConfigureRequest(action);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets the request timeout.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="timespan">Time to wait before the request times out.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithTimeout(this Uri uri, TimeSpan timespan)
        {
            return new EasyRequest(uri).WithTimeout(timespan);
        }

        /// <summary>
        /// Creates a new CaesarRequest and sets the request timeout.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="seconds">Seconds to wait before the request times out.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithTimeout(this Uri uri, int seconds)
        {
            return new EasyRequest(uri).WithTimeout(seconds);
        }

        /// <summary>
        /// Creates a new CaesarRequest and adds a pattern representing an HTTP status code or range of codes which (in addition to 2xx) will NOT result in a CaesarHttpException being thrown.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="pattern">Examples: "3xx", "100,300,600", "100-299,6xx"</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest AllowHttpStatus(this Uri uri, string pattern)
        {
            return new EasyRequest(uri).AllowHttpStatus(pattern);
        }

        /// <summary>
        /// Creates a new CaesarRequest and adds an HttpStatusCode which (in addition to 2xx) will NOT result in a CaesarHttpException being thrown.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="statusCodes">The HttpStatusCode(s) to allow.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest AllowHttpStatus(this Uri uri, params HttpStatusCode[] statusCodes)
        {
            return new EasyRequest(uri).AllowHttpStatus(statusCodes);
        }

        /// <summary>
        /// Creates a new CaesarRequest and configures it to allow any returned HTTP status without throwing a CaesarHttpException.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest AllowAnyHttpStatus(this Uri uri)
        {
            return new EasyRequest(uri).AllowAnyHttpStatus();
        }

        /// <summary>
        /// Creates a new CaesarRequest and configures whether redirects are automatically followed.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="enabled">true if Caesar should automatically send a new request to the redirect URL, false if it should not.</param>
        /// <returns>A new ICaesarRequest.</returns>
        public static IEasyRequest WithAutoRedirect(this Uri uri, bool enabled)
        {
            return new EasyRequest(uri).WithAutoRedirect(enabled);
        }



        /// <summary>
        /// Creates a new CaesarRequest and asynchronously downloads a file.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="localFolderPath">Path of local folder where file is to be downloaded.</param>
        /// <param name="localFileName">Name of local file. If not specified, the source filename (last segment of the URL) is used.</param>
        /// <param name="bufferSize">Buffer size in bytes. Default is 4096.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <returns>A Task whose result is the local path of the downloaded file.</returns>
        public static Task<string> DownloadFileAsync(this Uri uri, string localFolderPath, string localFileName = null, int bufferSize = 4096, CancellationToken cancellationToken = default(CancellationToken))
        {
            return new EasyRequest(uri).DownloadFileAsync(localFolderPath, localFileName, bufferSize, cancellationToken);
        }

        /// <summary>
        /// Creates a CaesarRequest and sends an asynchronous multipart/form-data POST request.
        /// </summary>
        /// <param name="uri">This System.Uri.</param>
        /// <param name="buildContent">A delegate for building the content parts.</param>
        /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        /// <returns>A Task whose result is the received ICaesarResponse.</returns>
        public static Task<IEasyResponse> PostMultipartAsync(this Uri uri, Action<CapturedMultipartContent> buildContent, CancellationToken cancellationToken = default(CancellationToken))
        {
            return new EasyRequest(uri).PostMultipartAsync(buildContent, cancellationToken);
        }

    }
}
